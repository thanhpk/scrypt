function asm_smix() {
    'use strict';
    var asm = function (global, env, buffer) {
        'use asm';
        var HEAP32 = new global.Int32Array(buffer), Math_imul = global.Math.imul, HEAP8 = new global.Int8Array(buffer), HEAPU8 = new global.Uint8Array(buffer);
        function _SMix($0, $1, $2, $3, $4, $5, $6) {
            $0 = $0 | 0;
            $1 = $1 | 0;
            $2 = $2 | 0;
            $3 = $3 | 0;
            $4 = $4 | 0;
            $5 = $5 | 0;
            $6 = $6 | 0;
            var $$0108 = 0, $$0108$us = 0, $$016$i = 0, $$016$i100 = 0, $$016$i93 = 0, $$016$i96 = 0, $$091109 = 0, $$1113 = 0, $$1113$us = 0, $$192111 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $25 = 0, $45 = 0, $46 = 0, $48 = 0, $53 = 0, $58 = 0, $59 = 0, $69 = 0, $7 = 0, $72 = 0, $79 = 0, $8 = 0, $82 = 0, $9 = 0, $91 = 0, $93 = 0;
            $7 = $1 << 7;
            $8 = $1 << 5;
            $9 = $3 + $7 | 0;
            $11 = $3 + ($1 << 8) | 0;
            if ($4 | 0) {
                L3: do
                    if ($5 >>> 0 < $6 >>> 0) {
                        $14 = $7 + -64 | 0;
                        $15 = $3 + $14 | 0;
                        $16 = $0 + -1 | 0;
                        $17 = $8 & 1073741792;
                        $19 = $9 + $14 | 0;
                        if (!$17) {
                            $$1113$us = $5;
                            while (1) {
                                _blockmix_salsa8($3, $9, $1);
                                _blockmix_salsa8($9, $3, $1);
                                $$1113$us = $$1113$us + 2 | 0;
                                if ($$1113$us >>> 0 >= $6 >>> 0)
                                    break L3;
                            }
                        }
                        else
                            $$1113 = $5;
                        do {
                            $69 = $11 + ((Math_imul(HEAP32[$15 >> 2] & $16, $8) | 0) << 2) | 0;
                            $$016$i100 = 0;
                            do {
                                $72 = $3 + ($$016$i100 << 2) | 0;
                                HEAP32[$72 >> 2] = HEAP32[$72 >> 2] ^ HEAP32[$69 + ($$016$i100 << 2) >> 2];
                                $$016$i100 = $$016$i100 + 1 | 0;
                            } while (($$016$i100 | 0) != ($17 | 0));
                            _blockmix_salsa8($3, $9, $1);
                            $79 = $11 + ((Math_imul(HEAP32[$19 >> 2] & $16, $8) | 0) << 2) | 0;
                            $$016$i93 = 0;
                            do {
                                $82 = $9 + ($$016$i93 << 2) | 0;
                                HEAP32[$82 >> 2] = HEAP32[$82 >> 2] ^ HEAP32[$79 + ($$016$i93 << 2) >> 2];
                                $$016$i93 = $$016$i93 + 1 | 0;
                            } while (($$016$i93 | 0) != ($17 | 0));
                            _blockmix_salsa8($9, $3, $1);
                            $$1113 = $$1113 + 2 | 0;
                        } while ($$1113 >>> 0 < $6 >>> 0);
                    }
                while (0);
                if (($6 | 0) == ($0 | 0) & ($8 | 0) != 0)
                    $$192111 = 0;
                else
                    return;
                do {
                    $91 = $2 + ($$192111 << 2) | 0;
                    $93 = HEAP32[$3 + ($$192111 << 2) >> 2] | 0;
                    HEAP8[$91 >> 0] = $93;
                    HEAP8[$91 + 1 >> 0] = $93 >>> 8;
                    HEAP8[$91 + 2 >> 0] = $93 >>> 16;
                    HEAP8[$91 + 3 >> 0] = $93 >>> 24;
                    $$192111 = $$192111 + 1 | 0;
                } while (($$192111 | 0) != ($8 | 0));
                return;
            }
            if (($5 | 0) == 0 & ($8 | 0) != 0) {
                $$091109 = 0;
                do {
                    $25 = $2 + ($$091109 << 2) | 0;
                    HEAP32[$3 + ($$091109 << 2) >> 2] = (HEAPU8[$25 + 1 >> 0] | 0) << 8 | (HEAPU8[$25 >> 0] | 0) | (HEAPU8[$25 + 2 >> 0] | 0) << 16 | (HEAPU8[$25 + 3 >> 0] | 0) << 24;
                    $$091109 = $$091109 + 1 | 0;
                } while (($$091109 | 0) != ($8 | 0));
            }
            $45 = Math_imul($8, $5) | 0;
            $46 = Math_imul($8, $6) | 0;
            if ($45 >>> 0 >= $46 >>> 0)
                return;
            $48 = $8 & 1073741792;
            if (!$48) {
                $$0108$us = $45;
                do {
                    _blockmix_salsa8($3, $9, $1);
                    $$0108$us = $$0108$us + $8 + $8 | 0;
                    _blockmix_salsa8($9, $3, $1);
                } while ($$0108$us >>> 0 < $46 >>> 0);
                return;
            }
            else
                $$0108 = $45;
            do {
                $53 = $11 + ($$0108 << 2) | 0;
                $$016$i = 0;
                do {
                    HEAP32[$53 + ($$016$i << 2) >> 2] = HEAP32[$3 + ($$016$i << 2) >> 2];
                    $$016$i = $$016$i + 1 | 0;
                } while (($$016$i | 0) != ($48 | 0));
                $58 = $$0108 + $8 | 0;
                _blockmix_salsa8($3, $9, $1);
                $59 = $11 + ($58 << 2) | 0;
                $$016$i96 = 0;
                do {
                    HEAP32[$59 + ($$016$i96 << 2) >> 2] = HEAP32[$9 + ($$016$i96 << 2) >> 2];
                    $$016$i96 = $$016$i96 + 1 | 0;
                } while (($$016$i96 | 0) != ($48 | 0));
                $$0108 = $58 + $8 | 0;
                _blockmix_salsa8($9, $3, $1);
            } while ($$0108 >>> 0 < $46 >>> 0);
            return;
        }
        function _blockmix_salsa8($0, $1, $2) {
            $0 = $0 | 0;
            $1 = $1 | 0;
            $2 = $2 | 0;
            var $$016081639 = 0, $$016091638 = 0, $$016101637 = 0, $$016111636 = 0, $$016121635 = 0, $$016131634 = 0, $$016141633 = 0, $$016151632 = 0, $$016161631 = 0, $$016171630 = 0, $$016181629 = 0, $$016191628 = 0, $$016201627 = 0, $$016211626 = 0, $$016221625 = 0, $$016231624 = 0, $$01640 = 0, $1000 = 0, $1001 = 0, $1005 = 0, $1006 = 0, $1010 = 0, $1011 = 0, $1015 = 0, $1016 = 0, $1020 = 0, $1021 = 0, $1025 = 0, $1026 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1035 = 0, $1036 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1045 = 0, $1046 = 0, $1050 = 0, $1051 = 0, $1055 = 0, $1056 = 0, $1060 = 0, $1061 = 0, $1065 = 0, $1066 = 0, $1070 = 0, $1071 = 0, $1075 = 0, $1076 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1085 = 0, $1086 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1095 = 0, $1096 = 0, $1100 = 0, $1101 = 0, $1105 = 0, $1106 = 0, $1110 = 0, $1111 = 0, $1115 = 0, $1116 = 0, $1120 = 0, $1121 = 0, $1125 = 0, $1126 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1135 = 0, $1136 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1145 = 0, $1146 = 0, $1150 = 0, $1151 = 0, $1155 = 0, $1156 = 0, $1160 = 0, $1161 = 0, $1165 = 0, $1166 = 0, $1170 = 0, $1171 = 0, $1175 = 0, $1176 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1185 = 0, $1186 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1195 = 0, $1196 = 0, $1200 = 0, $1201 = 0, $1205 = 0, $1206 = 0, $1210 = 0, $1211 = 0, $1215 = 0, $1216 = 0, $1220 = 0, $1221 = 0, $1225 = 0, $1226 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1235 = 0, $1236 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1245 = 0, $1246 = 0, $1250 = 0, $1251 = 0, $1255 = 0, $1256 = 0, $1260 = 0, $1261 = 0, $1265 = 0, $1266 = 0, $1270 = 0, $1271 = 0, $1275 = 0, $1276 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1285 = 0, $1286 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1295 = 0, $1296 = 0, $1300 = 0, $1301 = 0, $1305 = 0, $1306 = 0, $1310 = 0, $1311 = 0, $1315 = 0, $1316 = 0, $1320 = 0, $1321 = 0, $1325 = 0, $1326 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1335 = 0, $1336 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1345 = 0, $1346 = 0, $1350 = 0, $1351 = 0, $1355 = 0, $1356 = 0, $1360 = 0, $1361 = 0, $1365 = 0, $1366 = 0, $1370 = 0, $1371 = 0, $1375 = 0, $1376 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1385 = 0, $1386 = 0, $139 = 0, $1391 = 0, $1395 = 0, $1396 = 0, $1400 = 0, $1401 = 0, $1405 = 0, $1406 = 0, $1411 = 0, $1415 = 0, $1416 = 0, $1420 = 0, $1421 = 0, $1425 = 0, $1426 = 0, $143 = 0, $1431 = 0, $1435 = 0, $1436 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1445 = 0, $1446 = 0, $1468 = 0, $148 = 0, $149 = 0, $153 = 0, $154 = 0, $158 = 0, $159 = 0, $163 = 0, $164 = 0, $168 = 0, $169 = 0, $173 = 0, $174 = 0, $178 = 0, $179 = 0, $183 = 0, $184 = 0, $188 = 0, $189 = 0, $193 = 0, $194 = 0, $198 = 0, $199 = 0, $203 = 0, $204 = 0, $208 = 0, $209 = 0, $213 = 0, $214 = 0, $218 = 0, $219 = 0, $223 = 0, $224 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $238 = 0, $239 = 0, $243 = 0, $244 = 0, $248 = 0, $249 = 0, $253 = 0, $254 = 0, $258 = 0, $259 = 0, $263 = 0, $264 = 0, $268 = 0, $269 = 0, $273 = 0, $274 = 0, $278 = 0, $279 = 0, $283 = 0, $284 = 0, $288 = 0, $289 = 0, $293 = 0, $294 = 0, $298 = 0, $299 = 0, $3 = 0, $303 = 0, $304 = 0, $308 = 0, $309 = 0, $313 = 0, $314 = 0, $318 = 0, $319 = 0, $323 = 0, $324 = 0, $328 = 0, $329 = 0, $333 = 0, $334 = 0, $338 = 0, $339 = 0, $343 = 0, $344 = 0, $348 = 0, $349 = 0, $353 = 0, $354 = 0, $358 = 0, $359 = 0, $363 = 0, $364 = 0, $368 = 0, $369 = 0, $373 = 0, $374 = 0, $378 = 0, $379 = 0, $383 = 0, $384 = 0, $388 = 0, $389 = 0, $39 = 0, $393 = 0, $394 = 0, $398 = 0, $399 = 0, $40 = 0, $403 = 0, $404 = 0, $408 = 0, $409 = 0, $41 = 0, $413 = 0, $414 = 0, $418 = 0, $419 = 0, $423 = 0, $424 = 0, $428 = 0, $429 = 0, $43 = 0, $433 = 0, $434 = 0, $438 = 0, $439 = 0, $443 = 0, $444 = 0, $448 = 0, $449 = 0, $453 = 0, $454 = 0, $458 = 0, $459 = 0, $46 = 0, $463 = 0, $464 = 0, $468 = 0, $469 = 0, $473 = 0, $474 = 0, $478 = 0, $479 = 0, $483 = 0, $484 = 0, $488 = 0, $489 = 0, $49 = 0, $493 = 0, $494 = 0, $498 = 0, $499 = 0, $503 = 0, $504 = 0, $508 = 0, $509 = 0, $513 = 0, $514 = 0, $518 = 0, $519 = 0, $52 = 0, $523 = 0, $524 = 0, $528 = 0, $529 = 0, $533 = 0, $534 = 0, $538 = 0, $539 = 0, $543 = 0, $544 = 0, $548 = 0, $549 = 0, $55 = 0, $553 = 0, $554 = 0, $558 = 0, $559 = 0, $563 = 0, $564 = 0, $568 = 0, $569 = 0, $573 = 0, $574 = 0, $578 = 0, $579 = 0, $58 = 0, $583 = 0, $584 = 0, $588 = 0, $589 = 0, $593 = 0, $594 = 0, $598 = 0, $599 = 0, $6 = 0, $603 = 0, $604 = 0, $608 = 0, $609 = 0, $61 = 0, $613 = 0, $614 = 0, $618 = 0, $619 = 0, $623 = 0, $624 = 0, $628 = 0, $629 = 0, $633 = 0, $634 = 0, $638 = 0, $639 = 0, $64 = 0, $643 = 0, $644 = 0, $648 = 0, $649 = 0, $653 = 0, $654 = 0, $658 = 0, $659 = 0, $663 = 0, $664 = 0, $669 = 0, $67 = 0, $673 = 0, $674 = 0, $678 = 0, $679 = 0, $683 = 0, $684 = 0, $689 = 0, $693 = 0, $694 = 0, $698 = 0, $699 = 0, $70 = 0, $703 = 0, $704 = 0, $709 = 0, $713 = 0, $714 = 0, $718 = 0, $719 = 0, $723 = 0, $724 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $76 = 0, $763 = 0, $765 = 0, $768 = 0, $771 = 0, $774 = 0, $777 = 0, $780 = 0, $783 = 0, $786 = 0, $789 = 0, $79 = 0, $792 = 0, $795 = 0, $798 = 0, $801 = 0, $804 = 0, $807 = 0, $810 = 0, $811 = 0, $815 = 0, $816 = 0, $82 = 0, $820 = 0, $821 = 0, $825 = 0, $826 = 0, $830 = 0, $831 = 0, $835 = 0, $836 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $85 = 0, $850 = 0, $851 = 0, $855 = 0, $856 = 0, $860 = 0, $861 = 0, $865 = 0, $866 = 0, $870 = 0, $871 = 0, $875 = 0, $876 = 0, $88 = 0, $880 = 0, $881 = 0, $885 = 0, $886 = 0, $89 = 0, $890 = 0, $891 = 0, $895 = 0, $896 = 0, $900 = 0, $901 = 0, $905 = 0, $906 = 0, $910 = 0, $911 = 0, $915 = 0, $916 = 0, $920 = 0, $921 = 0, $925 = 0, $926 = 0, $93 = 0, $930 = 0, $931 = 0, $935 = 0, $936 = 0, $94 = 0, $940 = 0, $941 = 0, $945 = 0, $946 = 0, $950 = 0, $951 = 0, $955 = 0, $956 = 0, $960 = 0, $961 = 0, $965 = 0, $966 = 0, $970 = 0, $971 = 0, $975 = 0, $976 = 0, $98 = 0, $980 = 0, $981 = 0, $985 = 0, $986 = 0, $99 = 0, $990 = 0, $991 = 0, $995 = 0, $996 = 0;
            $3 = $2 << 1;
            $6 = $0 + (($2 << 5) + -16 << 2) | 0;
            if (!$3)
                return;
            $39 = $2 << 4;
            $$016081639 = HEAP32[$6 >> 2] | 0;
            $$016091638 = HEAP32[$6 + 4 >> 2] | 0;
            $$016101637 = HEAP32[$6 + 8 >> 2] | 0;
            $$016111636 = HEAP32[$6 + 12 >> 2] | 0;
            $$016121635 = HEAP32[$6 + 16 >> 2] | 0;
            $$016131634 = HEAP32[$6 + 20 >> 2] | 0;
            $$016141633 = HEAP32[$6 + 24 >> 2] | 0;
            $$016151632 = HEAP32[$6 + 28 >> 2] | 0;
            $$016161631 = HEAP32[$6 + 32 >> 2] | 0;
            $$016171630 = HEAP32[$6 + 36 >> 2] | 0;
            $$016181629 = HEAP32[$6 + 40 >> 2] | 0;
            $$016191628 = HEAP32[$6 + 44 >> 2] | 0;
            $$016201627 = HEAP32[$6 + 48 >> 2] | 0;
            $$016211626 = HEAP32[$6 + 52 >> 2] | 0;
            $$016221625 = HEAP32[$6 + 56 >> 2] | 0;
            $$016231624 = HEAP32[$6 + 60 >> 2] | 0;
            $$01640 = 0;
            do {
                $40 = $$01640 << 4;
                $41 = $0 + ($40 << 2) | 0;
                $43 = HEAP32[$41 >> 2] ^ $$016081639;
                $46 = HEAP32[$41 + 4 >> 2] ^ $$016091638;
                $49 = HEAP32[$41 + 8 >> 2] ^ $$016101637;
                $52 = HEAP32[$41 + 12 >> 2] ^ $$016111636;
                $55 = HEAP32[$41 + 16 >> 2] ^ $$016121635;
                $58 = HEAP32[$41 + 20 >> 2] ^ $$016131634;
                $61 = HEAP32[$41 + 24 >> 2] ^ $$016141633;
                $64 = HEAP32[$41 + 28 >> 2] ^ $$016151632;
                $67 = HEAP32[$41 + 32 >> 2] ^ $$016161631;
                $70 = HEAP32[$41 + 36 >> 2] ^ $$016171630;
                $73 = HEAP32[$41 + 40 >> 2] ^ $$016181629;
                $76 = HEAP32[$41 + 44 >> 2] ^ $$016191628;
                $79 = HEAP32[$41 + 48 >> 2] ^ $$016201627;
                $82 = HEAP32[$41 + 52 >> 2] ^ $$016211626;
                $85 = HEAP32[$41 + 56 >> 2] ^ $$016221625;
                $88 = HEAP32[$41 + 60 >> 2] ^ $$016231624;
                $89 = $79 + $43 | 0;
                $93 = ($89 << 7 | $89 >>> 25) ^ $55;
                $94 = $93 + $43 | 0;
                $98 = ($94 << 9 | $94 >>> 23) ^ $67;
                $99 = $98 + $93 | 0;
                $103 = ($99 << 13 | $99 >>> 19) ^ $79;
                $104 = $103 + $98 | 0;
                $108 = ($104 << 18 | $104 >>> 14) ^ $43;
                $109 = $58 + $46 | 0;
                $113 = $70 ^ ($109 << 7 | $109 >>> 25);
                $114 = $113 + $58 | 0;
                $118 = $82 ^ ($114 << 9 | $114 >>> 23);
                $119 = $118 + $113 | 0;
                $123 = ($119 << 13 | $119 >>> 19) ^ $46;
                $124 = $123 + $118 | 0;
                $128 = ($124 << 18 | $124 >>> 14) ^ $58;
                $129 = $73 + $61 | 0;
                $133 = $85 ^ ($129 << 7 | $129 >>> 25);
                $134 = $133 + $73 | 0;
                $138 = ($134 << 9 | $134 >>> 23) ^ $49;
                $139 = $138 + $133 | 0;
                $143 = ($139 << 13 | $139 >>> 19) ^ $61;
                $144 = $143 + $138 | 0;
                $148 = ($144 << 18 | $144 >>> 14) ^ $73;
                $149 = $88 + $76 | 0;
                $153 = ($149 << 7 | $149 >>> 25) ^ $52;
                $154 = $153 + $88 | 0;
                $158 = ($154 << 9 | $154 >>> 23) ^ $64;
                $159 = $158 + $153 | 0;
                $163 = ($159 << 13 | $159 >>> 19) ^ $76;
                $164 = $163 + $158 | 0;
                $168 = ($164 << 18 | $164 >>> 14) ^ $88;
                $169 = $108 + $153 | 0;
                $173 = ($169 << 7 | $169 >>> 25) ^ $123;
                $174 = $173 + $108 | 0;
                $178 = ($174 << 9 | $174 >>> 23) ^ $138;
                $179 = $178 + $173 | 0;
                $183 = ($179 << 13 | $179 >>> 19) ^ $153;
                $184 = $183 + $178 | 0;
                $188 = ($184 << 18 | $184 >>> 14) ^ $108;
                $189 = $128 + $93 | 0;
                $193 = ($189 << 7 | $189 >>> 25) ^ $143;
                $194 = $193 + $128 | 0;
                $198 = ($194 << 9 | $194 >>> 23) ^ $158;
                $199 = $198 + $193 | 0;
                $203 = ($199 << 13 | $199 >>> 19) ^ $93;
                $204 = $203 + $198 | 0;
                $208 = ($204 << 18 | $204 >>> 14) ^ $128;
                $209 = $148 + $113 | 0;
                $213 = ($209 << 7 | $209 >>> 25) ^ $163;
                $214 = $213 + $148 | 0;
                $218 = ($214 << 9 | $214 >>> 23) ^ $98;
                $219 = $218 + $213 | 0;
                $223 = ($219 << 13 | $219 >>> 19) ^ $113;
                $224 = $223 + $218 | 0;
                $228 = ($224 << 18 | $224 >>> 14) ^ $148;
                $229 = $168 + $133 | 0;
                $233 = ($229 << 7 | $229 >>> 25) ^ $103;
                $234 = $233 + $168 | 0;
                $238 = ($234 << 9 | $234 >>> 23) ^ $118;
                $239 = $238 + $233 | 0;
                $243 = ($239 << 13 | $239 >>> 19) ^ $133;
                $244 = $243 + $238 | 0;
                $248 = ($244 << 18 | $244 >>> 14) ^ $168;
                $249 = $188 + $233 | 0;
                $253 = ($249 << 7 | $249 >>> 25) ^ $203;
                $254 = $253 + $188 | 0;
                $258 = ($254 << 9 | $254 >>> 23) ^ $218;
                $259 = $258 + $253 | 0;
                $263 = ($259 << 13 | $259 >>> 19) ^ $233;
                $264 = $263 + $258 | 0;
                $268 = ($264 << 18 | $264 >>> 14) ^ $188;
                $269 = $208 + $173 | 0;
                $273 = ($269 << 7 | $269 >>> 25) ^ $223;
                $274 = $273 + $208 | 0;
                $278 = ($274 << 9 | $274 >>> 23) ^ $238;
                $279 = $278 + $273 | 0;
                $283 = ($279 << 13 | $279 >>> 19) ^ $173;
                $284 = $283 + $278 | 0;
                $288 = ($284 << 18 | $284 >>> 14) ^ $208;
                $289 = $228 + $193 | 0;
                $293 = ($289 << 7 | $289 >>> 25) ^ $243;
                $294 = $293 + $228 | 0;
                $298 = ($294 << 9 | $294 >>> 23) ^ $178;
                $299 = $298 + $293 | 0;
                $303 = ($299 << 13 | $299 >>> 19) ^ $193;
                $304 = $303 + $298 | 0;
                $308 = ($304 << 18 | $304 >>> 14) ^ $228;
                $309 = $248 + $213 | 0;
                $313 = ($309 << 7 | $309 >>> 25) ^ $183;
                $314 = $313 + $248 | 0;
                $318 = ($314 << 9 | $314 >>> 23) ^ $198;
                $319 = $318 + $313 | 0;
                $323 = ($319 << 13 | $319 >>> 19) ^ $213;
                $324 = $323 + $318 | 0;
                $328 = ($324 << 18 | $324 >>> 14) ^ $248;
                $329 = $268 + $313 | 0;
                $333 = ($329 << 7 | $329 >>> 25) ^ $283;
                $334 = $333 + $268 | 0;
                $338 = ($334 << 9 | $334 >>> 23) ^ $298;
                $339 = $338 + $333 | 0;
                $343 = ($339 << 13 | $339 >>> 19) ^ $313;
                $344 = $343 + $338 | 0;
                $348 = ($344 << 18 | $344 >>> 14) ^ $268;
                $349 = $288 + $253 | 0;
                $353 = ($349 << 7 | $349 >>> 25) ^ $303;
                $354 = $353 + $288 | 0;
                $358 = ($354 << 9 | $354 >>> 23) ^ $318;
                $359 = $358 + $353 | 0;
                $363 = ($359 << 13 | $359 >>> 19) ^ $253;
                $364 = $363 + $358 | 0;
                $368 = ($364 << 18 | $364 >>> 14) ^ $288;
                $369 = $308 + $273 | 0;
                $373 = ($369 << 7 | $369 >>> 25) ^ $323;
                $374 = $373 + $308 | 0;
                $378 = ($374 << 9 | $374 >>> 23) ^ $258;
                $379 = $378 + $373 | 0;
                $383 = ($379 << 13 | $379 >>> 19) ^ $273;
                $384 = $383 + $378 | 0;
                $388 = ($384 << 18 | $384 >>> 14) ^ $308;
                $389 = $328 + $293 | 0;
                $393 = ($389 << 7 | $389 >>> 25) ^ $263;
                $394 = $393 + $328 | 0;
                $398 = ($394 << 9 | $394 >>> 23) ^ $278;
                $399 = $398 + $393 | 0;
                $403 = ($399 << 13 | $399 >>> 19) ^ $293;
                $404 = $403 + $398 | 0;
                $408 = ($404 << 18 | $404 >>> 14) ^ $328;
                $409 = $348 + $393 | 0;
                $413 = ($409 << 7 | $409 >>> 25) ^ $363;
                $414 = $413 + $348 | 0;
                $418 = ($414 << 9 | $414 >>> 23) ^ $378;
                $419 = $418 + $413 | 0;
                $423 = ($419 << 13 | $419 >>> 19) ^ $393;
                $424 = $423 + $418 | 0;
                $428 = ($424 << 18 | $424 >>> 14) ^ $348;
                $429 = $368 + $333 | 0;
                $433 = ($429 << 7 | $429 >>> 25) ^ $383;
                $434 = $433 + $368 | 0;
                $438 = ($434 << 9 | $434 >>> 23) ^ $398;
                $439 = $438 + $433 | 0;
                $443 = ($439 << 13 | $439 >>> 19) ^ $333;
                $444 = $443 + $438 | 0;
                $448 = ($444 << 18 | $444 >>> 14) ^ $368;
                $449 = $388 + $353 | 0;
                $453 = ($449 << 7 | $449 >>> 25) ^ $403;
                $454 = $453 + $388 | 0;
                $458 = ($454 << 9 | $454 >>> 23) ^ $338;
                $459 = $458 + $453 | 0;
                $463 = ($459 << 13 | $459 >>> 19) ^ $353;
                $464 = $463 + $458 | 0;
                $468 = ($464 << 18 | $464 >>> 14) ^ $388;
                $469 = $408 + $373 | 0;
                $473 = ($469 << 7 | $469 >>> 25) ^ $343;
                $474 = $473 + $408 | 0;
                $478 = ($474 << 9 | $474 >>> 23) ^ $358;
                $479 = $478 + $473 | 0;
                $483 = ($479 << 13 | $479 >>> 19) ^ $373;
                $484 = $483 + $478 | 0;
                $488 = ($484 << 18 | $484 >>> 14) ^ $408;
                $489 = $428 + $473 | 0;
                $493 = ($489 << 7 | $489 >>> 25) ^ $443;
                $494 = $493 + $428 | 0;
                $498 = ($494 << 9 | $494 >>> 23) ^ $458;
                $499 = $498 + $493 | 0;
                $503 = ($499 << 13 | $499 >>> 19) ^ $473;
                $504 = $503 + $498 | 0;
                $508 = ($504 << 18 | $504 >>> 14) ^ $428;
                $509 = $448 + $413 | 0;
                $513 = ($509 << 7 | $509 >>> 25) ^ $463;
                $514 = $513 + $448 | 0;
                $518 = ($514 << 9 | $514 >>> 23) ^ $478;
                $519 = $518 + $513 | 0;
                $523 = ($519 << 13 | $519 >>> 19) ^ $413;
                $524 = $523 + $518 | 0;
                $528 = ($524 << 18 | $524 >>> 14) ^ $448;
                $529 = $468 + $433 | 0;
                $533 = ($529 << 7 | $529 >>> 25) ^ $483;
                $534 = $533 + $468 | 0;
                $538 = ($534 << 9 | $534 >>> 23) ^ $418;
                $539 = $538 + $533 | 0;
                $543 = ($539 << 13 | $539 >>> 19) ^ $433;
                $544 = $543 + $538 | 0;
                $548 = ($544 << 18 | $544 >>> 14) ^ $468;
                $549 = $488 + $453 | 0;
                $553 = ($549 << 7 | $549 >>> 25) ^ $423;
                $554 = $553 + $488 | 0;
                $558 = ($554 << 9 | $554 >>> 23) ^ $438;
                $559 = $558 + $553 | 0;
                $563 = ($559 << 13 | $559 >>> 19) ^ $453;
                $564 = $563 + $558 | 0;
                $568 = ($564 << 18 | $564 >>> 14) ^ $488;
                $569 = $508 + $553 | 0;
                $573 = ($569 << 7 | $569 >>> 25) ^ $523;
                $574 = $573 + $508 | 0;
                $578 = ($574 << 9 | $574 >>> 23) ^ $538;
                $579 = $578 + $573 | 0;
                $583 = ($579 << 13 | $579 >>> 19) ^ $553;
                $584 = $583 + $578 | 0;
                $588 = ($584 << 18 | $584 >>> 14) ^ $508;
                $589 = $528 + $493 | 0;
                $593 = ($589 << 7 | $589 >>> 25) ^ $543;
                $594 = $593 + $528 | 0;
                $598 = ($594 << 9 | $594 >>> 23) ^ $558;
                $599 = $598 + $593 | 0;
                $603 = ($599 << 13 | $599 >>> 19) ^ $493;
                $604 = $603 + $598 | 0;
                $608 = ($604 << 18 | $604 >>> 14) ^ $528;
                $609 = $548 + $513 | 0;
                $613 = ($609 << 7 | $609 >>> 25) ^ $563;
                $614 = $613 + $548 | 0;
                $618 = ($614 << 9 | $614 >>> 23) ^ $498;
                $619 = $618 + $613 | 0;
                $623 = ($619 << 13 | $619 >>> 19) ^ $513;
                $624 = $623 + $618 | 0;
                $628 = ($624 << 18 | $624 >>> 14) ^ $548;
                $629 = $568 + $533 | 0;
                $633 = ($629 << 7 | $629 >>> 25) ^ $503;
                $634 = $633 + $568 | 0;
                $638 = ($634 << 9 | $634 >>> 23) ^ $518;
                $639 = $638 + $633 | 0;
                $643 = ($639 << 13 | $639 >>> 19) ^ $533;
                $644 = $643 + $638 | 0;
                $648 = ($644 << 18 | $644 >>> 14) ^ $568;
                $649 = $588 + $633 | 0;
                $653 = ($649 << 7 | $649 >>> 25) ^ $603;
                $654 = $653 + $588 | 0;
                $658 = ($654 << 9 | $654 >>> 23) ^ $618;
                $659 = $658 + $653 | 0;
                $663 = ($659 << 13 | $659 >>> 19) ^ $633;
                $664 = $663 + $658 | 0;
                $669 = $608 + $573 | 0;
                $673 = ($669 << 7 | $669 >>> 25) ^ $623;
                $674 = $673 + $608 | 0;
                $678 = ($674 << 9 | $674 >>> 23) ^ $638;
                $679 = $678 + $673 | 0;
                $683 = ($679 << 13 | $679 >>> 19) ^ $573;
                $684 = $683 + $678 | 0;
                $689 = $628 + $593 | 0;
                $693 = ($689 << 7 | $689 >>> 25) ^ $643;
                $694 = $693 + $628 | 0;
                $698 = ($694 << 9 | $694 >>> 23) ^ $578;
                $699 = $698 + $693 | 0;
                $703 = ($699 << 13 | $699 >>> 19) ^ $593;
                $704 = $703 + $698 | 0;
                $709 = $648 + $613 | 0;
                $713 = ($709 << 7 | $709 >>> 25) ^ $583;
                $714 = $713 + $648 | 0;
                $718 = ($714 << 9 | $714 >>> 23) ^ $598;
                $719 = $718 + $713 | 0;
                $723 = ($719 << 13 | $719 >>> 19) ^ $613;
                $724 = $723 + $718 | 0;
                $729 = (($664 << 18 | $664 >>> 14) ^ $588) + $43 | 0;
                $730 = $653 + $46 | 0;
                $731 = $658 + $49 | 0;
                $732 = $663 + $52 | 0;
                $733 = $683 + $55 | 0;
                $734 = (($684 << 18 | $684 >>> 14) ^ $608) + $58 | 0;
                $735 = $673 + $61 | 0;
                $736 = $678 + $64 | 0;
                $737 = $698 + $67 | 0;
                $738 = $703 + $70 | 0;
                $739 = (($704 << 18 | $704 >>> 14) ^ $628) + $73 | 0;
                $740 = $693 + $76 | 0;
                $741 = $713 + $79 | 0;
                $742 = $718 + $82 | 0;
                $743 = $723 + $85 | 0;
                $744 = (($724 << 18 | $724 >>> 14) ^ $648) + $88 | 0;
                $745 = $$01640 << 3;
                $746 = $1 + ($745 << 2) | 0;
                HEAP32[$746 >> 2] = $729;
                HEAP32[$746 + 4 >> 2] = $730;
                HEAP32[$746 + 8 >> 2] = $731;
                HEAP32[$746 + 12 >> 2] = $732;
                HEAP32[$746 + 16 >> 2] = $733;
                HEAP32[$746 + 20 >> 2] = $734;
                HEAP32[$746 + 24 >> 2] = $735;
                HEAP32[$746 + 28 >> 2] = $736;
                HEAP32[$746 + 32 >> 2] = $737;
                HEAP32[$746 + 36 >> 2] = $738;
                HEAP32[$746 + 40 >> 2] = $739;
                HEAP32[$746 + 44 >> 2] = $740;
                HEAP32[$746 + 48 >> 2] = $741;
                HEAP32[$746 + 52 >> 2] = $742;
                HEAP32[$746 + 56 >> 2] = $743;
                HEAP32[$746 + 60 >> 2] = $744;
                $763 = $0 + (($40 | 16) << 2) | 0;
                $765 = $729 ^ HEAP32[$763 >> 2];
                $768 = $730 ^ HEAP32[$763 + 4 >> 2];
                $771 = $731 ^ HEAP32[$763 + 8 >> 2];
                $774 = $732 ^ HEAP32[$763 + 12 >> 2];
                $777 = $733 ^ HEAP32[$763 + 16 >> 2];
                $780 = $734 ^ HEAP32[$763 + 20 >> 2];
                $783 = $735 ^ HEAP32[$763 + 24 >> 2];
                $786 = $736 ^ HEAP32[$763 + 28 >> 2];
                $789 = $737 ^ HEAP32[$763 + 32 >> 2];
                $792 = $738 ^ HEAP32[$763 + 36 >> 2];
                $795 = $739 ^ HEAP32[$763 + 40 >> 2];
                $798 = $740 ^ HEAP32[$763 + 44 >> 2];
                $801 = $741 ^ HEAP32[$763 + 48 >> 2];
                $804 = $742 ^ HEAP32[$763 + 52 >> 2];
                $807 = $743 ^ HEAP32[$763 + 56 >> 2];
                $810 = $744 ^ HEAP32[$763 + 60 >> 2];
                $811 = $765 + $801 | 0;
                $815 = ($811 << 7 | $811 >>> 25) ^ $777;
                $816 = $815 + $765 | 0;
                $820 = ($816 << 9 | $816 >>> 23) ^ $789;
                $821 = $820 + $815 | 0;
                $825 = ($821 << 13 | $821 >>> 19) ^ $801;
                $826 = $825 + $820 | 0;
                $830 = ($826 << 18 | $826 >>> 14) ^ $765;
                $831 = $780 + $768 | 0;
                $835 = ($831 << 7 | $831 >>> 25) ^ $792;
                $836 = $835 + $780 | 0;
                $840 = ($836 << 9 | $836 >>> 23) ^ $804;
                $841 = $840 + $835 | 0;
                $845 = ($841 << 13 | $841 >>> 19) ^ $768;
                $846 = $845 + $840 | 0;
                $850 = ($846 << 18 | $846 >>> 14) ^ $780;
                $851 = $795 + $783 | 0;
                $855 = ($851 << 7 | $851 >>> 25) ^ $807;
                $856 = $855 + $795 | 0;
                $860 = ($856 << 9 | $856 >>> 23) ^ $771;
                $861 = $860 + $855 | 0;
                $865 = ($861 << 13 | $861 >>> 19) ^ $783;
                $866 = $865 + $860 | 0;
                $870 = ($866 << 18 | $866 >>> 14) ^ $795;
                $871 = $810 + $798 | 0;
                $875 = ($871 << 7 | $871 >>> 25) ^ $774;
                $876 = $875 + $810 | 0;
                $880 = ($876 << 9 | $876 >>> 23) ^ $786;
                $881 = $880 + $875 | 0;
                $885 = ($881 << 13 | $881 >>> 19) ^ $798;
                $886 = $885 + $880 | 0;
                $890 = ($886 << 18 | $886 >>> 14) ^ $810;
                $891 = $830 + $875 | 0;
                $895 = ($891 << 7 | $891 >>> 25) ^ $845;
                $896 = $895 + $830 | 0;
                $900 = ($896 << 9 | $896 >>> 23) ^ $860;
                $901 = $900 + $895 | 0;
                $905 = ($901 << 13 | $901 >>> 19) ^ $875;
                $906 = $905 + $900 | 0;
                $910 = ($906 << 18 | $906 >>> 14) ^ $830;
                $911 = $850 + $815 | 0;
                $915 = ($911 << 7 | $911 >>> 25) ^ $865;
                $916 = $915 + $850 | 0;
                $920 = ($916 << 9 | $916 >>> 23) ^ $880;
                $921 = $920 + $915 | 0;
                $925 = ($921 << 13 | $921 >>> 19) ^ $815;
                $926 = $925 + $920 | 0;
                $930 = ($926 << 18 | $926 >>> 14) ^ $850;
                $931 = $870 + $835 | 0;
                $935 = ($931 << 7 | $931 >>> 25) ^ $885;
                $936 = $935 + $870 | 0;
                $940 = ($936 << 9 | $936 >>> 23) ^ $820;
                $941 = $940 + $935 | 0;
                $945 = ($941 << 13 | $941 >>> 19) ^ $835;
                $946 = $945 + $940 | 0;
                $950 = ($946 << 18 | $946 >>> 14) ^ $870;
                $951 = $890 + $855 | 0;
                $955 = ($951 << 7 | $951 >>> 25) ^ $825;
                $956 = $955 + $890 | 0;
                $960 = ($956 << 9 | $956 >>> 23) ^ $840;
                $961 = $960 + $955 | 0;
                $965 = ($961 << 13 | $961 >>> 19) ^ $855;
                $966 = $965 + $960 | 0;
                $970 = ($966 << 18 | $966 >>> 14) ^ $890;
                $971 = $910 + $955 | 0;
                $975 = ($971 << 7 | $971 >>> 25) ^ $925;
                $976 = $975 + $910 | 0;
                $980 = ($976 << 9 | $976 >>> 23) ^ $940;
                $981 = $980 + $975 | 0;
                $985 = ($981 << 13 | $981 >>> 19) ^ $955;
                $986 = $985 + $980 | 0;
                $990 = ($986 << 18 | $986 >>> 14) ^ $910;
                $991 = $930 + $895 | 0;
                $995 = ($991 << 7 | $991 >>> 25) ^ $945;
                $996 = $995 + $930 | 0;
                $1000 = ($996 << 9 | $996 >>> 23) ^ $960;
                $1001 = $1000 + $995 | 0;
                $1005 = ($1001 << 13 | $1001 >>> 19) ^ $895;
                $1006 = $1005 + $1000 | 0;
                $1010 = ($1006 << 18 | $1006 >>> 14) ^ $930;
                $1011 = $950 + $915 | 0;
                $1015 = ($1011 << 7 | $1011 >>> 25) ^ $965;
                $1016 = $1015 + $950 | 0;
                $1020 = ($1016 << 9 | $1016 >>> 23) ^ $900;
                $1021 = $1020 + $1015 | 0;
                $1025 = ($1021 << 13 | $1021 >>> 19) ^ $915;
                $1026 = $1025 + $1020 | 0;
                $1030 = ($1026 << 18 | $1026 >>> 14) ^ $950;
                $1031 = $970 + $935 | 0;
                $1035 = ($1031 << 7 | $1031 >>> 25) ^ $905;
                $1036 = $1035 + $970 | 0;
                $1040 = ($1036 << 9 | $1036 >>> 23) ^ $920;
                $1041 = $1040 + $1035 | 0;
                $1045 = ($1041 << 13 | $1041 >>> 19) ^ $935;
                $1046 = $1045 + $1040 | 0;
                $1050 = ($1046 << 18 | $1046 >>> 14) ^ $970;
                $1051 = $990 + $1035 | 0;
                $1055 = ($1051 << 7 | $1051 >>> 25) ^ $1005;
                $1056 = $1055 + $990 | 0;
                $1060 = ($1056 << 9 | $1056 >>> 23) ^ $1020;
                $1061 = $1060 + $1055 | 0;
                $1065 = ($1061 << 13 | $1061 >>> 19) ^ $1035;
                $1066 = $1065 + $1060 | 0;
                $1070 = ($1066 << 18 | $1066 >>> 14) ^ $990;
                $1071 = $1010 + $975 | 0;
                $1075 = ($1071 << 7 | $1071 >>> 25) ^ $1025;
                $1076 = $1075 + $1010 | 0;
                $1080 = ($1076 << 9 | $1076 >>> 23) ^ $1040;
                $1081 = $1080 + $1075 | 0;
                $1085 = ($1081 << 13 | $1081 >>> 19) ^ $975;
                $1086 = $1085 + $1080 | 0;
                $1090 = ($1086 << 18 | $1086 >>> 14) ^ $1010;
                $1091 = $1030 + $995 | 0;
                $1095 = ($1091 << 7 | $1091 >>> 25) ^ $1045;
                $1096 = $1095 + $1030 | 0;
                $1100 = ($1096 << 9 | $1096 >>> 23) ^ $980;
                $1101 = $1100 + $1095 | 0;
                $1105 = ($1101 << 13 | $1101 >>> 19) ^ $995;
                $1106 = $1105 + $1100 | 0;
                $1110 = ($1106 << 18 | $1106 >>> 14) ^ $1030;
                $1111 = $1050 + $1015 | 0;
                $1115 = ($1111 << 7 | $1111 >>> 25) ^ $985;
                $1116 = $1115 + $1050 | 0;
                $1120 = ($1116 << 9 | $1116 >>> 23) ^ $1000;
                $1121 = $1120 + $1115 | 0;
                $1125 = ($1121 << 13 | $1121 >>> 19) ^ $1015;
                $1126 = $1125 + $1120 | 0;
                $1130 = ($1126 << 18 | $1126 >>> 14) ^ $1050;
                $1131 = $1070 + $1115 | 0;
                $1135 = ($1131 << 7 | $1131 >>> 25) ^ $1085;
                $1136 = $1135 + $1070 | 0;
                $1140 = ($1136 << 9 | $1136 >>> 23) ^ $1100;
                $1141 = $1140 + $1135 | 0;
                $1145 = ($1141 << 13 | $1141 >>> 19) ^ $1115;
                $1146 = $1145 + $1140 | 0;
                $1150 = ($1146 << 18 | $1146 >>> 14) ^ $1070;
                $1151 = $1090 + $1055 | 0;
                $1155 = ($1151 << 7 | $1151 >>> 25) ^ $1105;
                $1156 = $1155 + $1090 | 0;
                $1160 = ($1156 << 9 | $1156 >>> 23) ^ $1120;
                $1161 = $1160 + $1155 | 0;
                $1165 = ($1161 << 13 | $1161 >>> 19) ^ $1055;
                $1166 = $1165 + $1160 | 0;
                $1170 = ($1166 << 18 | $1166 >>> 14) ^ $1090;
                $1171 = $1110 + $1075 | 0;
                $1175 = ($1171 << 7 | $1171 >>> 25) ^ $1125;
                $1176 = $1175 + $1110 | 0;
                $1180 = ($1176 << 9 | $1176 >>> 23) ^ $1060;
                $1181 = $1180 + $1175 | 0;
                $1185 = ($1181 << 13 | $1181 >>> 19) ^ $1075;
                $1186 = $1185 + $1180 | 0;
                $1190 = ($1186 << 18 | $1186 >>> 14) ^ $1110;
                $1191 = $1130 + $1095 | 0;
                $1195 = ($1191 << 7 | $1191 >>> 25) ^ $1065;
                $1196 = $1195 + $1130 | 0;
                $1200 = ($1196 << 9 | $1196 >>> 23) ^ $1080;
                $1201 = $1200 + $1195 | 0;
                $1205 = ($1201 << 13 | $1201 >>> 19) ^ $1095;
                $1206 = $1205 + $1200 | 0;
                $1210 = ($1206 << 18 | $1206 >>> 14) ^ $1130;
                $1211 = $1150 + $1195 | 0;
                $1215 = ($1211 << 7 | $1211 >>> 25) ^ $1165;
                $1216 = $1215 + $1150 | 0;
                $1220 = ($1216 << 9 | $1216 >>> 23) ^ $1180;
                $1221 = $1220 + $1215 | 0;
                $1225 = ($1221 << 13 | $1221 >>> 19) ^ $1195;
                $1226 = $1225 + $1220 | 0;
                $1230 = ($1226 << 18 | $1226 >>> 14) ^ $1150;
                $1231 = $1170 + $1135 | 0;
                $1235 = ($1231 << 7 | $1231 >>> 25) ^ $1185;
                $1236 = $1235 + $1170 | 0;
                $1240 = ($1236 << 9 | $1236 >>> 23) ^ $1200;
                $1241 = $1240 + $1235 | 0;
                $1245 = ($1241 << 13 | $1241 >>> 19) ^ $1135;
                $1246 = $1245 + $1240 | 0;
                $1250 = ($1246 << 18 | $1246 >>> 14) ^ $1170;
                $1251 = $1190 + $1155 | 0;
                $1255 = ($1251 << 7 | $1251 >>> 25) ^ $1205;
                $1256 = $1255 + $1190 | 0;
                $1260 = ($1256 << 9 | $1256 >>> 23) ^ $1140;
                $1261 = $1260 + $1255 | 0;
                $1265 = ($1261 << 13 | $1261 >>> 19) ^ $1155;
                $1266 = $1265 + $1260 | 0;
                $1270 = ($1266 << 18 | $1266 >>> 14) ^ $1190;
                $1271 = $1210 + $1175 | 0;
                $1275 = ($1271 << 7 | $1271 >>> 25) ^ $1145;
                $1276 = $1275 + $1210 | 0;
                $1280 = ($1276 << 9 | $1276 >>> 23) ^ $1160;
                $1281 = $1280 + $1275 | 0;
                $1285 = ($1281 << 13 | $1281 >>> 19) ^ $1175;
                $1286 = $1285 + $1280 | 0;
                $1290 = ($1286 << 18 | $1286 >>> 14) ^ $1210;
                $1291 = $1230 + $1275 | 0;
                $1295 = ($1291 << 7 | $1291 >>> 25) ^ $1245;
                $1296 = $1295 + $1230 | 0;
                $1300 = ($1296 << 9 | $1296 >>> 23) ^ $1260;
                $1301 = $1300 + $1295 | 0;
                $1305 = ($1301 << 13 | $1301 >>> 19) ^ $1275;
                $1306 = $1305 + $1300 | 0;
                $1310 = ($1306 << 18 | $1306 >>> 14) ^ $1230;
                $1311 = $1250 + $1215 | 0;
                $1315 = ($1311 << 7 | $1311 >>> 25) ^ $1265;
                $1316 = $1315 + $1250 | 0;
                $1320 = ($1316 << 9 | $1316 >>> 23) ^ $1280;
                $1321 = $1320 + $1315 | 0;
                $1325 = ($1321 << 13 | $1321 >>> 19) ^ $1215;
                $1326 = $1325 + $1320 | 0;
                $1330 = ($1326 << 18 | $1326 >>> 14) ^ $1250;
                $1331 = $1270 + $1235 | 0;
                $1335 = ($1331 << 7 | $1331 >>> 25) ^ $1285;
                $1336 = $1335 + $1270 | 0;
                $1340 = ($1336 << 9 | $1336 >>> 23) ^ $1220;
                $1341 = $1340 + $1335 | 0;
                $1345 = ($1341 << 13 | $1341 >>> 19) ^ $1235;
                $1346 = $1345 + $1340 | 0;
                $1350 = ($1346 << 18 | $1346 >>> 14) ^ $1270;
                $1351 = $1290 + $1255 | 0;
                $1355 = ($1351 << 7 | $1351 >>> 25) ^ $1225;
                $1356 = $1355 + $1290 | 0;
                $1360 = ($1356 << 9 | $1356 >>> 23) ^ $1240;
                $1361 = $1360 + $1355 | 0;
                $1365 = ($1361 << 13 | $1361 >>> 19) ^ $1255;
                $1366 = $1365 + $1360 | 0;
                $1370 = ($1366 << 18 | $1366 >>> 14) ^ $1290;
                $1371 = $1310 + $1355 | 0;
                $1375 = ($1371 << 7 | $1371 >>> 25) ^ $1325;
                $1376 = $1375 + $1310 | 0;
                $1380 = ($1376 << 9 | $1376 >>> 23) ^ $1340;
                $1381 = $1380 + $1375 | 0;
                $1385 = ($1381 << 13 | $1381 >>> 19) ^ $1355;
                $1386 = $1385 + $1380 | 0;
                $1391 = $1330 + $1295 | 0;
                $1395 = ($1391 << 7 | $1391 >>> 25) ^ $1345;
                $1396 = $1395 + $1330 | 0;
                $1400 = ($1396 << 9 | $1396 >>> 23) ^ $1360;
                $1401 = $1400 + $1395 | 0;
                $1405 = ($1401 << 13 | $1401 >>> 19) ^ $1295;
                $1406 = $1405 + $1400 | 0;
                $1411 = $1350 + $1315 | 0;
                $1415 = ($1411 << 7 | $1411 >>> 25) ^ $1365;
                $1416 = $1415 + $1350 | 0;
                $1420 = ($1416 << 9 | $1416 >>> 23) ^ $1300;
                $1421 = $1420 + $1415 | 0;
                $1425 = ($1421 << 13 | $1421 >>> 19) ^ $1315;
                $1426 = $1425 + $1420 | 0;
                $1431 = $1370 + $1335 | 0;
                $1435 = ($1431 << 7 | $1431 >>> 25) ^ $1305;
                $1436 = $1435 + $1370 | 0;
                $1440 = ($1436 << 9 | $1436 >>> 23) ^ $1320;
                $1441 = $1440 + $1435 | 0;
                $1445 = ($1441 << 13 | $1441 >>> 19) ^ $1335;
                $1446 = $1445 + $1440 | 0;
                $$016081639 = (($1386 << 18 | $1386 >>> 14) ^ $1310) + $765 | 0;
                $$016091638 = $1375 + $768 | 0;
                $$016101637 = $1380 + $771 | 0;
                $$016111636 = $1385 + $774 | 0;
                $$016121635 = $1405 + $777 | 0;
                $$016131634 = (($1406 << 18 | $1406 >>> 14) ^ $1330) + $780 | 0;
                $$016141633 = $1395 + $783 | 0;
                $$016151632 = $1400 + $786 | 0;
                $$016161631 = $1420 + $789 | 0;
                $$016171630 = $1425 + $792 | 0;
                $$016181629 = (($1426 << 18 | $1426 >>> 14) ^ $1350) + $795 | 0;
                $$016191628 = $1415 + $798 | 0;
                $$016201627 = $1435 + $801 | 0;
                $$016211626 = $1440 + $804 | 0;
                $$016221625 = $1445 + $807 | 0;
                $$016231624 = (($1446 << 18 | $1446 >>> 14) ^ $1370) + $810 | 0;
                $1468 = $1 + ($745 + $39 << 2) | 0;
                HEAP32[$1468 >> 2] = $$016081639;
                HEAP32[$1468 + 4 >> 2] = $$016091638;
                HEAP32[$1468 + 8 >> 2] = $$016101637;
                HEAP32[$1468 + 12 >> 2] = $$016111636;
                HEAP32[$1468 + 16 >> 2] = $$016121635;
                HEAP32[$1468 + 20 >> 2] = $$016131634;
                HEAP32[$1468 + 24 >> 2] = $$016141633;
                HEAP32[$1468 + 28 >> 2] = $$016151632;
                HEAP32[$1468 + 32 >> 2] = $$016161631;
                HEAP32[$1468 + 36 >> 2] = $$016171630;
                HEAP32[$1468 + 40 >> 2] = $$016181629;
                HEAP32[$1468 + 44 >> 2] = $$016191628;
                HEAP32[$1468 + 48 >> 2] = $$016201627;
                HEAP32[$1468 + 52 >> 2] = $$016211626;
                HEAP32[$1468 + 56 >> 2] = $$016221625;
                HEAP32[$1468 + 60 >> 2] = $$016231624;
                $$01640 = $$01640 + 2 | 0;
            } while ($$01640 >>> 0 < $3 >>> 0);
            return;
        }
        return {
            _SMix: _SMix
        };
    };
    function create(buffer) {
        return asm(self, {}, buffer);
    }
    function getHeap() {
        return 8200;
    }
    return {
        create: create,
        getHeap: getHeap
    };
}
;
///<reference path="../lib/smix.js"/>
var Child = function () {
    'use strict';
    ;
    var mPtrB = 64, mPtrXYV, mBlockSize, mArgN, mArgR, mAsmBuf, 
    //        mAsmU32: Uint32Array,
    mAsmU8, mAsmMod = asm_smix(), mAsmObj = null, mProgPos, mProgStep, mFirstStage;
    // Worker's postMessage
    var postMessage = self.postMessage;
    var getTick = Date.now;
    function prehot() {
        // test data
        // let s1 = mPtrB >> 2;
        // let s2 = mPtrB + mBlockSize >> 2;
        // let k = getTick();
        // for (let i = s1; i < s2; i++) {
        //     k = (k * 13) >>> 0;
        //     mAsmU32[i] = k;
        // }
        // first run
        // mAsmObj._SMix(mArgN, mArgR, mPtrB, mPtrXYV, 0, 0, 8192);
        // mAsmObj._SMix(mArgN, mArgR, mPtrB, mPtrXYV, 1, 0, 8192);
    }
    function config(N, r) {
        mArgN = N;
        mArgR = r;
        mBlockSize = 128 * r;
        mPtrXYV = mPtrB + mBlockSize;
        var size = mPtrB + mBlockSize * (3 + N);
        // 空间必须是 16M 的整数倍
        var need = Math.ceil(size / 16777216) * 16777216;
        if (!mAsmBuf || mAsmBuf.byteLength < need) {
            try {
                mAsmBuf = new ArrayBuffer(need);
            }
            catch (err) {
                return false;
            }
            // mAsmU32 = new Uint32Array(mAsmBuf);
            mAsmU8 = new Uint8Array(mAsmBuf);
            // create instance
            mAsmObj = mAsmMod.create(mAsmBuf);
            prehot();
        }
        return true;
    }
    function start(input) {
        var buf = new Uint8Array(input);
        mAsmU8.set(buf, mPtrB);
        mProgStep = 262144 /* INIT_ITER */ / mArgR;
        mProgPos = 0;
        mFirstStage = true;
    }
    function setRate(p) {
        // 保持为 2 的倍数
        mProgStep = (mProgStep * p >> 1) << 1;
    }
    function advance() {
        var stp = mProgStep;
        var beg = mProgPos;
        var end = beg + stp;
        var last = 0;
        var t;
        if (end >= mArgN) {
            end = mArgN;
            stp = end - beg;
            last = mFirstStage ? 1 : 2;
        }
        if (last != 2) {
            // 在计算前通知主线程，并发布下一个任务，减少消息通信的间隔
            postMessage(stp);
        }
        if (last == 0) {
            t = getTick();
        }
        mAsmObj._SMix(mArgN, mArgR, mPtrB, mPtrXYV, mFirstStage ? 0 : 1, beg, end);
        switch (last) {
            case 0:
                t = getTick() - t;
                mProgPos = end;
                // 根据当前的计算速度，调整下一次的迭代次数
                // 使计算时间保持在 INTERVAL ms 左右
                setRate(100 /* INTERVAL */ / t);
                break;
            case 1:
                mProgPos = 0;
                mFirstStage = false;
                // SMix 第二步的迭代耗时更大
                setRate(0.7 /* STAGE2_RATE */);
                break;
            case 2:
                // complete notify
                var output = mAsmBuf.slice(mPtrB, mPtrB + mBlockSize);
                postMessage({
                    state: 'done',
                    step: stp,
                    output: output
                }, [output]);
                break;
        }
    }
    function onMessage(e) {
        var msg = e.data;
        // fast case
        if (msg === true) {
            advance();
            return;
        }
        switch (msg.cmd) {
            // case 'advance':
            //     advance();
            //     break;
            case 'task':
                start(msg.input);
                advance();
                break;
            case 'config':
                var success = config(msg.N, msg.r);
                postMessage({
                    state: success ? 'ready' : 'fail'
                });
                break;
            case 'free':
                mAsmObj = mAsmU8 = mAsmBuf = null;
                break;
        }
    }
    addEventListener('message', onMessage);
};
function asm_pbkdf2() {
    'use strict';
    var asm = function (global, env, buffer) {
        'use asm';
        var HEAP32 = new global.Int32Array(buffer), HEAP8 = new global.Int8Array(buffer), HEAPU8 = new global.Uint8Array(buffer);
        function _PBKDF2_OneIter($0, $1, $2, $3, $4, $5) {
            $0 = $0 | 0;
            $1 = $1 | 0;
            $2 = $2 | 0;
            $3 = $3 | 0;
            $4 = $4 | 0;
            $5 = $5 | 0;
            var $$01$i = 0, $$025$i$i = 0, $$026$i$i = 0, $$pr$i$i = 0, $16 = 0, $29 = 0, $43 = 0, $44 = 0, dest = 0, src = 0, stop = 0;
            if ($1 >>> 0 > 64) {
                HEAP32[191] = 0;
                HEAP32[183] = 1779033703;
                HEAP32[184] = -1150833019;
                HEAP32[185] = 1013904242;
                HEAP32[186] = -1521486534;
                HEAP32[187] = 1359893119;
                HEAP32[188] = -1694144372;
                HEAP32[189] = 528734635;
                HEAP32[190] = 1541459225;
                _SHA256_Update(732, $0, $1);
                _SHA256_Final(1816, 732);
                $$025$i$i = 1816;
                $$026$i$i = 32;
            }
            else {
                $$025$i$i = $0;
                $$026$i$i = $1;
            }
            HEAP32[191] = 0;
            HEAP32[183] = 1779033703;
            HEAP32[184] = -1150833019;
            HEAP32[185] = 1013904242;
            HEAP32[186] = -1521486534;
            HEAP32[187] = 1359893119;
            HEAP32[188] = -1694144372;
            HEAP32[189] = 528734635;
            HEAP32[190] = 1541459225;
            dest = 1752;
            stop = dest + 64 | 0;
            do {
                HEAP8[dest >> 0] = 54;
                dest = dest + 1 | 0;
            } while ((dest | 0) < (stop | 0));
            if (!$$026$i$i)
                $$pr$i$i = 1;
            else {
                HEAP8[1752] = HEAP8[$$025$i$i >> 0] ^ 54;
                if (($$026$i$i | 0) == 1)
                    $$pr$i$i = 0;
                else {
                    HEAP8[1753] = HEAP8[$$025$i$i + 1 >> 0] ^ 54;
                    if (($$026$i$i | 0) == 2)
                        $$pr$i$i = 0;
                    else {
                        HEAP8[1754] = HEAP8[$$025$i$i + 2 >> 0] ^ 54;
                        if (($$026$i$i | 0) == 3)
                            $$pr$i$i = 0;
                        else {
                            $16 = 3;
                            do {
                                HEAP8[1752 + $16 >> 0] = HEAP8[$$025$i$i + $16 >> 0] ^ HEAP8[1752 + $16 >> 0];
                                $16 = $16 + 1 | 0;
                            } while (($16 | 0) != ($$026$i$i | 0));
                            $$pr$i$i = 0;
                        }
                    }
                }
            }
            _SHA256_Update(732, 1752, 64);
            HEAP32[216] = 0;
            HEAP32[208] = 1779033703;
            HEAP32[209] = -1150833019;
            HEAP32[210] = 1013904242;
            HEAP32[211] = -1521486534;
            HEAP32[212] = 1359893119;
            HEAP32[213] = -1694144372;
            HEAP32[214] = 528734635;
            HEAP32[215] = 1541459225;
            dest = 1752;
            stop = dest + 64 | 0;
            do {
                HEAP8[dest >> 0] = 92;
                dest = dest + 1 | 0;
            } while ((dest | 0) < (stop | 0));
            if (!$$pr$i$i) {
                HEAP8[1752] = HEAP8[$$025$i$i >> 0] ^ 92;
                if (($$026$i$i | 0) != 1) {
                    HEAP8[1753] = HEAP8[$$025$i$i + 1 >> 0] ^ 92;
                    if (($$026$i$i | 0) != 2) {
                        HEAP8[1754] = HEAP8[$$025$i$i + 2 >> 0] ^ 92;
                        if (($$026$i$i | 0) != 3) {
                            $29 = 3;
                            do {
                                HEAP8[1752 + $29 >> 0] = HEAP8[$$025$i$i + $29 >> 0] ^ HEAP8[1752 + $29 >> 0];
                                $29 = $29 + 1 | 0;
                            } while (($29 | 0) != ($$026$i$i | 0));
                        }
                    }
                }
            }
            _SHA256_Update(832, 1752, 64);
            _SHA256_Update(732, $2, $3);
            if ($5 | 0) {
                $$01$i = 0;
                $44 = 0;
                do {
                    $$01$i = $$01$i + 1 | 0;
                    HEAP8[1687] = $$01$i;
                    HEAP8[1686] = $$01$i >>> 8;
                    HEAP8[1685] = $$01$i >>> 16;
                    HEAP8[1684] = $$01$i >>> 24;
                    _memcpy(932, 732, 200) | 0;
                    _SHA256_Update(932, 1684, 4);
                    _SHA256_Final(1848, 932);
                    _SHA256_Update(1032, 1848, 32);
                    _SHA256_Final(1688, 1032);
                    dest = 1720;
                    src = 1688;
                    stop = dest + 32 | 0;
                    do {
                        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
                        dest = dest + 1 | 0;
                        src = src + 1 | 0;
                    } while ((dest | 0) < (stop | 0));
                    $43 = $5 - $44 | 0;
                    _memcpy($4 + $44 | 0, 1720, ($43 >>> 0 > 32 ? 32 : $43) | 0) | 0;
                    $44 = $$01$i << 5;
                } while ($44 >>> 0 < $5 >>> 0);
            }
            return;
        }
        function _SHA256_Update($0, $1, $2) {
            $0 = $0 | 0;
            $1 = $1 | 0;
            $2 = $2 | 0;
            var $$0$lcssa = 0, $$027$lcssa = 0, $$02728 = 0, $$029 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $4 = 0, $5 = 0, $7 = 0;
            do
                if ($2 | 0) {
                    $4 = $0 + 32 | 0;
                    $5 = HEAP32[$4 >> 2] | 0;
                    $7 = $5 >>> 3 & 63;
                    HEAP32[$4 >> 2] = $5 + ($2 << 3);
                    $10 = 64 - $7 | 0;
                    $12 = $0 + 36 + $7 | 0;
                    if ($10 >>> 0 > $2 >>> 0) {
                        _memcpy($12 | 0, $1 | 0, $2 | 0) | 0;
                        break;
                    }
                    _memcpy($12 | 0, $1 | 0, $10 | 0) | 0;
                    $13 = $0 + 36 | 0;
                    _SHA256_Transform($0, $13);
                    $14 = $1 + $10 | 0;
                    $15 = $2 - $10 | 0;
                    if ($15 >>> 0 > 63) {
                        $18 = $7 + $2 + -128 | 0;
                        $19 = $18 & -64;
                        $21 = $19 + 128 - $7 | 0;
                        $$02728 = $15;
                        $$029 = $14;
                        while (1) {
                            _SHA256_Transform($0, $$029);
                            $$02728 = $$02728 + -64 | 0;
                            if ($$02728 >>> 0 <= 63)
                                break;
                            else
                                $$029 = $$029 + 64 | 0;
                        }
                        $$0$lcssa = $1 + $21 | 0;
                        $$027$lcssa = $18 - $19 | 0;
                    }
                    else {
                        $$0$lcssa = $14;
                        $$027$lcssa = $15;
                    }
                    _memcpy($13 | 0, $$0$lcssa | 0, $$027$lcssa | 0) | 0;
                }
            while (0);
            return;
        }
        function _memcpy(dest, src, num) {
            dest = dest | 0;
            src = src | 0;
            num = num | 0;
            var ret = 0;
            ret = dest | 0;
            if ((dest & 3) == (src & 3)) {
                while (dest & 3) {
                    if (!num)
                        return ret | 0;
                    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
                    dest = dest + 1 | 0;
                    src = src + 1 | 0;
                    num = num - 1 | 0;
                }
                while ((num | 0) >= 4) {
                    HEAP32[dest >> 2] = HEAP32[src >> 2];
                    dest = dest + 4 | 0;
                    src = src + 4 | 0;
                    num = num - 4 | 0;
                }
            }
            while ((num | 0) > 0) {
                HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
                dest = dest + 1 | 0;
                src = src + 1 | 0;
                num = num - 1 | 0;
            }
            return ret | 0;
        }
        function _SHA256_Transform($0, $1) {
            $0 = $0 | 0;
            $1 = $1 | 0;
            var $$01$i = 0, $$059 = 0, $$158 = 0, $$257 = 0, $112 = 0, $116 = 0, $123 = 0, $131 = 0, $25 = 0, $3 = 0, $51 = 0, $58 = 0, $63 = 0, $82 = 0, $93 = 0, $97 = 0, $51$looptemp = 0;
            $$01$i = 0;
            do {
                $3 = $1 + ($$01$i << 2) | 0;
                HEAP32[444 + ($$01$i << 2) >> 2] = (HEAPU8[$3 + 2 >> 0] | 0) << 8 | (HEAPU8[$3 + 3 >> 0] | 0) | (HEAPU8[$3 + 1 >> 0] | 0) << 16 | (HEAPU8[$3 >> 0] | 0) << 24;
                $$01$i = $$01$i + 1 | 0;
            } while (($$01$i | 0) != 16);
            $$059 = 16;
            $51 = HEAP32[111] | 0;
            do {
                $25 = HEAP32[444 + ($$059 + -2 << 2) >> 2] | 0;
                $51$looptemp = $51;
                $51 = HEAP32[444 + ($$059 + -15 << 2) >> 2] | 0;
                HEAP32[444 + ($$059 << 2) >> 2] = $51$looptemp + (HEAP32[444 + ($$059 + -7 << 2) >> 2] | 0) + (($25 >>> 19 | $25 << 13) ^ $25 >>> 10 ^ ($25 >>> 17 | $25 << 15)) + (($51 >>> 18 | $51 << 14) ^ $51 >>> 3 ^ ($51 >>> 7 | $51 << 25));
                $$059 = $$059 + 1 | 0;
            } while (($$059 | 0) != 64);
            HEAP32[175] = HEAP32[$0 >> 2];
            HEAP32[176] = HEAP32[$0 + 4 >> 2];
            HEAP32[177] = HEAP32[$0 + 8 >> 2];
            HEAP32[178] = HEAP32[$0 + 12 >> 2];
            HEAP32[179] = HEAP32[$0 + 16 >> 2];
            HEAP32[180] = HEAP32[$0 + 20 >> 2];
            HEAP32[181] = HEAP32[$0 + 24 >> 2];
            HEAP32[182] = HEAP32[$0 + 28 >> 2];
            $$158 = 0;
            do {
                $58 = 700 + (((71 - $$158 | 0) % 8 | 0) << 2) | 0;
                $63 = HEAP32[700 + (((68 - $$158 | 0) % 8 | 0) << 2) >> 2] | 0;
                $82 = HEAP32[700 + (((70 - $$158 | 0) % 8 | 0) << 2) >> 2] | 0;
                $93 = (HEAP32[444 + ($$158 << 2) >> 2] | 0) + (HEAP32[$58 >> 2] | 0) + (($63 >>> 6 | $63 << 26) ^ ($63 >>> 11 | $63 << 21) ^ ($63 >>> 25 | $63 << 7)) + (HEAP32[8 + ($$158 << 2) >> 2] | 0) + (($82 ^ HEAP32[700 + (((69 - $$158 | 0) % 8 | 0) << 2) >> 2]) & $63 ^ $82) | 0;
                $97 = HEAP32[700 + (((64 - $$158 | 0) % 8 | 0) << 2) >> 2] | 0;
                $112 = HEAP32[700 + (((65 - $$158 | 0) % 8 | 0) << 2) >> 2] | 0;
                $116 = HEAP32[700 + (((66 - $$158 | 0) % 8 | 0) << 2) >> 2] | 0;
                $123 = 700 + (((67 - $$158 | 0) % 8 | 0) << 2) | 0;
                HEAP32[$123 >> 2] = (HEAP32[$123 >> 2] | 0) + $93;
                HEAP32[$58 >> 2] = (($97 >>> 2 | $97 << 30) ^ ($97 >>> 13 | $97 << 19) ^ ($97 >>> 22 | $97 << 10)) + $93 + (($116 | $112) & $97 | $116 & $112);
                $$158 = $$158 + 1 | 0;
            } while (($$158 | 0) != 64);
            $$257 = 0;
            do {
                $131 = $0 + ($$257 << 2) | 0;
                HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + (HEAP32[700 + ($$257 << 2) >> 2] | 0);
                $$257 = $$257 + 1 | 0;
            } while (($$257 | 0) != 8);
            return;
        }
        function _SHA256_Final($0, $1) {
            $0 = $0 | 0;
            $1 = $1 | 0;
            var $$01$i = 0, $12 = 0, $16 = 0, $18 = 0, $3 = 0;
            $3 = HEAP32[$1 + 32 >> 2] | 0;
            HEAP8[1139] = $3;
            HEAP8[1138] = $3 >>> 8;
            HEAP8[1137] = $3 >>> 16;
            HEAP8[1136] = $3 >>> 24;
            $12 = $3 >>> 3 & 63;
            HEAP32[283] = 0;
            _SHA256_Update($1, 380, ($12 >>> 0 < 56 ? 56 : 120) - $12 | 0);
            _SHA256_Update($1, 1132, 8);
            $$01$i = 0;
            do {
                $16 = $0 + ($$01$i << 2) | 0;
                $18 = HEAP32[$1 + ($$01$i << 2) >> 2] | 0;
                HEAP8[$16 + 3 >> 0] = $18;
                HEAP8[$16 + 2 >> 0] = $18 >>> 8;
                HEAP8[$16 + 1 >> 0] = $18 >>> 16;
                HEAP8[$16 >> 0] = $18 >>> 24;
                $$01$i = $$01$i + 1 | 0;
            } while (($$01$i | 0) != 8);
            return;
        }
        return {
            _PBKDF2_OneIter: _PBKDF2_OneIter
        };
    };
    function create(buffer) {
        var arr = new Uint8Array(buffer);
        var bin = atob('mC+KQpFEN3HP+8C1pdu16VvCVjnxEfFZpII/ktVeHKuYqgfYAVuDEr6FMSTDfQxVdF2+cv6x3oCnBtybdPGbwcFpm+SGR77vxp3BD8yhDCRvLOktqoR0StypsFzaiPl2UlE+mG3GMajIJwOwx39Zv/ML4MZHkafVUWPKBmcpKRSFCrcnOCEbLvxtLE0TDThTVHMKZbsKanYuycKBhSxykqHov6JLZhqocItLwqNRbMcZ6JLRJAaZ1oU1DvRwoGoQFsGkGQhsNx5Md0gntbywNLMMHDlKqthOT8qcW/NvLmjugo90b2OleBR4yIQIAseM+v++kOtsUKT3o/m+8nhxxgUAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAAYAcAAAAEAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAr/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAQAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==');
        var base = 8;
        for (var i = 0; i < bin.length; i++) {
            arr[base + i] = bin.charCodeAt(i);
        }
        return asm(self, {}, buffer);
    }
    function getHeap() {
        return 8636;
    }
    return {
        create: create,
        getHeap: getHeap
    };
}
;
///<reference path="WorkerChild.ts"/>
///<reference path="../lib/pbkdf2.js"/>
///<reference path="../lib/smix.js"/>
var WorkerMain;
(function (WorkerMain) {
    var maxPassLen = 64, maxSaltLen = 64, maxDkLen = 64, maxThread = 4;
    var mArgP, mWorkerUrl, mAsmBuf, mAsmU8, mAsmMod = asm_pbkdf2(), 
    // 利用类型推导机制，获取 asm.js 模块的实例类型
    mAsmObj = null, mPassPtr, mSaltPtr, mDkPtr, mBlksPtr, mPassLen, mSaltLen, mDkLen, mBlkLen, mThreads, mWorkerPool = [], mReadyCounter, mDoingCounter, mDoneCounter;
    function config(N, r, P, thread) {
        if (thread == null) {
            var taskPerThread = Math.ceil(P / maxThread);
            thread = Math.ceil(P / taskPerThread);
        }
        mBlkLen = 128 * r;
        mArgP = P;
        mThreads = thread;
        mReadyCounter = 0;
        // pbkdf2 memory alloc
        var ptr = mAsmMod.getHeap();
        mPassPtr = ptr;
        ptr += maxPassLen;
        mSaltPtr = ptr;
        ptr += maxSaltLen;
        mDkPtr = ptr;
        ptr += maxDkLen;
        mBlksPtr = ptr;
        ptr += (mBlkLen * P);
        ptr = Math.ceil(ptr / 65536) * 65536;
        // init asm.js module
        if (!mAsmBuf || mAsmBuf.byteLength < ptr) {
            mAsmBuf = new ArrayBuffer(ptr);
            mAsmU8 = new Uint8Array(mAsmBuf);
            mAsmObj = mAsmMod.create(mAsmBuf);
        }
        if (!mWorkerUrl) {
            mWorkerUrl = createWorkerUrl();
        }
        for (var i = 0; i < mThreads; i++) {
            var worker = mWorkerPool[i];
            if (!worker) {
                worker = new Worker(mWorkerUrl);
                worker.onmessage = msgHander;
                worker['tag'] = 0;
                mWorkerPool[i] = worker;
            }
            worker.postMessage({
                cmd: 'config',
                N: N,
                r: r
            });
        }
    }
    WorkerMain.config = config;
    function hash(passBin, saltBin, dkLen) {
        mAsmU8.set(passBin, mPassPtr);
        mAsmU8.set(saltBin, mSaltPtr);
        mPassLen = passBin.length;
        mSaltLen = saltBin.length;
        mDkLen = dkLen || maxDkLen;
        mDoingCounter = 0;
        mDoneCounter = 0;
        // [B0, B1, ..., Bp] <- PBKDF2(pass, salt)
        mAsmObj._PBKDF2_OneIter(mPassPtr, mPassLen, mSaltPtr, mSaltLen, mBlksPtr, mBlkLen * mArgP);
        for (var i = 0; i < mThreads; i++) {
            task(mWorkerPool[i]);
        }
    }
    WorkerMain.hash = hash;
    function free() {
        mWorkerPool.forEach(function (w) {
            w.postMessage({
                cmd: 'free'
            });
        });
    }
    WorkerMain.free = free;
    function unload() {
        mWorkerPool.forEach(function (w) {
            w.terminate();
        });
        mWorkerPool = [];
        mAsmBuf = mAsmU8 = mAsmMod = null;
        URL.revokeObjectURL(mWorkerUrl);
    }
    WorkerMain.unload = unload;
    function createWorkerUrl() {
        /**
         CODE GEN：
           (function Child(..) {
              ...
           })();
           function asm_smix() {
              ...
           }
         */
        var code = '(' + Child + ')();' + asm_smix;
        var blob = new Blob([code], {
            type: 'text/javascript'
        });
        return URL.createObjectURL(blob);
    }
    function complete() {
        // final hash
        mAsmObj._PBKDF2_OneIter(mPassPtr, mPassLen, mBlksPtr, mBlkLen * mArgP, mDkPtr, mDkLen > 32 ? mDkLen : 32);
        // pass reference
        var dkBin = new Uint8Array(mAsmBuf, mDkPtr, mDkLen);
        WorkerMain.oncomplete(dkBin);
    }
    function msgHander(e) {
        var worker = this;
        var msg = e.data;
        // fast case
        if (typeof msg == 'number') {
            worker.postMessage(true);
            return;
        }
        switch (msg.state) {
            case 'done':
                // Bi -> B'i
                var buf = new Uint8Array(msg.output);
                var id = worker['tag'];
                mAsmU8.set(buf, mBlksPtr + mBlkLen * id);
                if (++mDoneCounter == mArgP) {
                    complete();
                }
                else if (mDoingCounter < mArgP) {
                    task(worker);
                }
                break;
            case 'ready':
                if (++mReadyCounter == mThreads) {
                    WorkerMain.onready();
                }
                break;
            case 'fail':
                WorkerMain.onerror('memory alloc fail');
                break;
        }
    }
    function task(worker) {
        var ptrBi = mBlksPtr + mDoingCounter * mBlkLen;
        var bufBi = mAsmBuf.slice(ptrBi, ptrBi + mBlkLen);
        worker['tag'] = mDoingCounter++;
        worker.postMessage({
            cmd: 'task',
            input: bufBi
        }, [bufBi]); // no copy
    }
})(WorkerMain || (WorkerMain = {}));
//# sourceMappingURL=scrypt.js.map